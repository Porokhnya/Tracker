Что нужно сделать, чтобы проверить отсыла данных с ESP:

1. Из монитора порта отдать команду

	SET=ESPSTA|id|password
	где
	id - имя точки доступа САМОЙ ESP
	password - пароль к этой точке доступа, минимум 8 символов, максимум - 19
	
	Любая команда к контроллеру заканчивается символами перевода строки с кодами \r\n, т.е. двумя байтами 0x0D 0x0A !!!
	В мониторе порта Arduino IDE это настраивается в выпадающем списке внизу.
	
2. Из монитора порта отдать команду

	SET=ESPROUTER|id|password
	где
	id - имя сети (конечного устройства), к которой коннектится ESP
	password - пароль к этой сети (конечному устройству)
	
3. Закачать файл index.php на любой виртуальный хост веб-сервера на устройстве, к которому коннектится ESP.
	В моём случае - это рабочий компьютер в локальной сети.
	
4. В CONFIG.h настроить параметры для отсыла:

	#define WIFI_DEBUG_CONNECT_TO F("192.168.43.50") // если раскомментировано - то коннектимся к этому адресу в локальной сети, если закомментировано - коннектимся прямо к точке доступа Wi-Fi
	#define WIFI_CONNECT_ATTEMPTS 3 // кол-во попыток соединиться с конечным устройством в рамках одной сессии
	#define HTTP_HANDLER F("/") // адрес обработчика HTTP-запросов
	#define HTTP_HOST F("current") // данные заголовка Host: (закомментировать, если не надо отсылать этот заголовок)
	
	По комментариям понятно, что к чему: в релизе нам надо коннектится прямо к конечному устройству, поэтому настройка WIFI_DEBUG_CONNECT_TO - выключается.
	В настройке HTTP_HANDLER - имя обработчика, если файл index.php не устраивает - его можно переименовать, а в настройку HTTP_HANDLER вписать

		#define HTTP_HANDLER F("/renamed.php")
		
	В настройке HTTP_HOST - данные для заголовка Host. Если используются виртуальные хосты - этот заголовок нужен. В моём случае - ESP соединяется в целях отладки
	с рабочим компьютером (его адрес в локальной сети 192.168.43.50), и на компьютере поднят виртуальный хост http://current - очевидно, для того, чтобы веб-сервер понимал, 
	к какому хосту адресован запрос - нужен заголовок Host.
	
5. Данные отсылаются методом POST с применением кодировки application/x-www-form-urlencoded
	
6. Дамп принятых данных можно посмотреть в файле request.log

7. Формат данных

	Данные посылаются пакетно, максимальное кол-во записей в пакете - регулируется настройкой WIFI_MAX_RECORDS_IN_ONE_PACKET. В пакете есть переменная временнОй метки, её имя tm, значение - 
	"dd.mm.yyyy hh:mm:ss" (без кавычек). В переменной count - количество записей, идущих в пакете.
	
	Каждая запись содержит несколько переменных, именование переменных происходит следующим образом: variableN, где variable - имя тех или иных данных записи, N - номер записи, в диапазоне 
	[0,iterator) (обращаем внимание, что максимальное значение переменной iterator - НЕ входит в диапазон), где iterator - значение переменной count.
	
	Типы переменных в одной записи:
	
	type (например, type0 для первой записи, typeN - для i-той записи) - содержит тип показаний:
	
		0 - температура с Si7021
		1 - влажность с Si7021
		2 - состояние концевика двери
		3 - данные с аналогового датчика (АЦП)
		
	state (например, state0 для первой записи, stateN - для i-той записи) - флаг соответствия порогам:
	
		0 - показания превышают пороговые значения (ОШИБКА)
		1 - показания не превышают пороговые значения (НОРМА)
		
	data (например, data0 для первой записи, dataN - для i-той записи) - данные с датчика:
	
	- для датчиков температуры и влажности - показания вида signN.M, где sign - опциональный знак минуса, N - число до запятой, M - число после запятой. 
	  Вид разделителя целой и дробной частей - настраивается в параметре DECIMAL_SEPARATOR прошивки
	
	- для датчика АЦП - значение АЦП в виде числа
	
	- для датчика двери: OPEN - дверь открыта, CLOSE - дверь закрыта
	
	
	В случае, если временнАя метка записи не совпадает с общей временнОй меткой - для записи добавляется поле вида
	
	rtmN (например, rtm0 для первой записи, rtmN - для i-той записи)
	
	которое содержит временнУю метку данной записи в формате, аналогичном формату поля tm (общей временнОй метки пакета).



	
	
	

	